/*
 *
 An Area can be either a container for other areas, or a container for a single article / ad.
 *
 */

context Area {

        constraint notContainer{

                check : ( self.isTypeOf(ArticleArea) or self.isTypeOf(AdArea) ) implies self.subArea.isEmpty()
                message: "Area " + self.name + " is of type " + self.type().name + ". It cannot contain other areas, but contains " + self.getSubAreasNames()
        }
}

// Helper method

operation Area getSubAreasNames() : String {
        var names = "";
        for (area : Area in self.subArea){
                names = names + "Area " + area.name + ", ";
        }
        return names;
}

/*
 *
 An Area cannot contain pages
 *
 */
context Area
{
	constraint noSubPage{
		check: self.subArea.forAll( a : Area | not a.isTypeOf(Page) )
		message: "Area " + self.name + " cannot contain pages."
	}
}

/*
 *
 An area cannot exceed the borders of its parent area
 *
 */

context Area {

		constraint insideParentArea{
                guard : not self.isTypeOf(Page)
                check : self.insideParent()
                message : "ArticleArea " + self.name + " exceeds parent area (" + self.parentArea.name + ")"
        }

}

// Helper methods

operation Area getParentTopLeft(c : String) : Real{
		if ( c = "x" ) { return self.parentArea.xTopLeft; }
		else { if ( c = "y" ) { return self.parentArea.yTopLeft; } }
}

operation Area getParentBottomRight(c : String) : Real{
		if ( c = "x" ) { return self.parentArea.xBottomRight; }
		else { if ( c = "y" ) { return self.parentArea.yBottomRight;} }
}

operation Area getHeight() : Real {
		return self.yBottomRight-self.yTopLeft;
}

operation Area getWidth() : Real {
		return self.xBottomRight-self.xTopLeft;
}

operation Area insideParent() : Boolean{
		if ( 
		     ( self.xTopLeft < 0 or self.yTopLeft < 0 ) 
		     or 
		     ( ( self.yTopLeft + self.getHeight() ) > self.parentArea.getHeight() 
		       or ( self.xTopLeft + self.getWidth() ) > self.parentArea.getWidth() ) 
		)  { return false; }
		else { return true; }
}


/*
 *
 TopLeft must be top/left of BottomRight
 *
 */
 
context Area {
	constraint noSwap {
		check : self.xTopLeft < self.xBottomRight and self.yTopLeft < self.yBottomRight
		message : "Area " + self.name + " is invalid. TopLeft and BottomRight are swapped."
	}

} 

/* 
 *
 Areas cannot overlap
 *
 */
 
 context Area {
 	// Pages do not overlap
 	guard : not self.isTypeOf(Page)
 	constraint noOverlap {
 		check : self.subArea.forAll( a : Area | not a.overlapping(a.getSiblings()) )
 		message : "Children of Area " + self.name + " overlap."
 	}
 }
 
operation Area getSiblings() : Set {
	return self.parentArea.subArea.excluding(self) ; 
}

operation Area overlapping( set : Set ) : Boolean {
	for ( a : Area in set) {
		if ( 
		( a.xTopLeft < self.xBottomRight and not ( a.xBottomRight < self.xTopLeft ) ) and
		( a.yTopLeft > self.yBottomRight and not ( a.yBottomRight > self.yTopLeft ) ) 
		) { 
			return true; 
		}
	}
	return false;
}

/*
 *
 All article in a page must have the same topic as the page
 *
 */
 
 context Page {
 
 	constraint sameTopic {
 
 		check : self.getAllChildrenTopicNames().forAll( s : String | s = self.topic.name )
 		message : "All articles and advertisements must have the same topic as their parent page " + self.pageNumber + ". Page topic is " + self.topic.name + " and children topics are " + self.getAllChildrenTopicNames()
 		
 	}
 }
 
 operation Page getAllAreas() : Collection {
 	return self.closure(area : Area | area.subArea );
 }
 
 operation Page getAllChildrenTopicNames() : Collection {
 	return self.getAllAreas().collect( a : ArticleArea | a.article).includingAll(self.getAllAreas().collect( a : AdArea | a.ad)).select( o : Any | o.isDefined()).metadata.topic.name;
 }
 
/*
 *
 Page numbers must be consecutive and different
 *
 */
context Newspaper {
	
	constraint pageNumbers{
		check : self.page.notEmpty() implies ( self.consecutive() and self.different() )
		message : "Page numbers must be consecutive: " + self.consecutive() + " and different: " + self.different() + ". Pages: " + self.page.pageNumber
	}
}

operation Newspaper consecutive() : Boolean {
	var pages = self.page.excluding( self.getLastPage() );
	return pages.forAll( p : Page | self.page.pageNumber.includes(p.pageNumber+1));
}

operation Newspaper getLastPage() : Page {
	return self.page.select( p : Page | p.pageNumber = self.page.pageNumber.max() ).first();
}

operation Newspaper different() : Boolean {
	return self.page.forAll( p1 : Page | self.page.excluding(p1).forAll( p2 : Page | p2.pageNumber <> p1.pageNumber ) );
}

/*
 *
 Pages must have the same size and absolute placement
 *
 */
 
 context Newspaper {
 	
 	constraint pagesSameSize{
 		check : self.page.xTopLeft.forAll( n : Real | n=0 ) 
 			and self.page.yTopLeft.forAll( n : Real | n=0 )
 			and self.page.yBottomRight.forAll( n1 : Real | self.page.yBottomRight.forAll( n2 : Real | n2=n1 ) )
 			and self.page.xBottomRight.forAll( n1 : Real | self.page.xBottomRight.forAll( n2 : Real | n2=n1 ) )
 		message: "All pages must have the same size and absolute placement. Positive axis are directed right and bottom."
 	}
 }
 
 /*
  *
  Names cannot contain spaces
  *
  *
  */
  
 context Area {
 	
 	constraint noSpacesInName{
	 	check : not " ".isSubstringOf(self.name)
	 	message : "Area " + self.name + " cannot contain spaces in its name."
 	}
 	
 }

 